{
    "name": "Consolidation_flow",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "name": "Deltas"
                },
                {
                    "linkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "name": "CurrentData"
                }
            ],
            "sinks": [
                {
                    "linkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "schemaLinkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "name": "StagingParquet"
                },
                {
                    "linkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "schemaLinkedService": {
                        "referenceName": "AzureDataLakeStorage",
                        "type": "LinkedServiceReference"
                    },
                    "name": "StagingCSV"
                }
            ],
            "transformations": [
                {
                    "name": "FilterForDeleted"
                },
                {
                    "name": "RemoveDeleted"
                },
                {
                    "name": "SortByTimestamp"
                },
                {
                    "name": "PickLastChanges"
                },
                {
                    "name": "CombineWithDeltas"
                },
                {
                    "name": "FilterEmptyRows"
                },
                {
                    "name": "DataFormatCondition"
                }
            ],
            "script": "parameters{\n\tcontainerName as string,\n\tentityName as string,\n\tdataFormat as string\n}\nsource(output(\n\t\t{timestamp-0} as long,\n\t\t{systemId-2000000000} as string,\n\t\t{SystemCreatedAt-2000000001} as timestamp,\n\t\t{$Company} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tentity: ($entityName),\n\tformat: 'cdm',\n\tmanifestType: 'manifest',\n\tmanifestName: 'deltas',\n\tlocal: true,\n\tfolderPath: '',\n\tfileSystem: ($containerName),\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'']) ~> Deltas\nsource(output(\n\t\t{timestamp-0} as long,\n\t\t{systemId-2000000000} as string,\n\t\t{SystemCreatedAt-2000000001} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tentity: ($entityName),\n\tformat: 'cdm',\n\tmanifestType: 'manifest',\n\tmanifestName: 'data',\n\tlocal: true,\n\tfolderPath: '',\n\tfileSystem: ($containerName),\n\ttimestampFormats: ['yyyy-MM-dd HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'']) ~> CurrentData\nDeltas filter(isNull({SystemCreatedAt-2000000001})) ~> FilterForDeleted\nCombineWithDeltas, FilterForDeleted exists(and(\r\n    CombineWithDeltas@{systemId-2000000000} == Deltas@{systemId-2000000000},\r\n    CombineWithDeltas@{$Company} == Deltas@{$Company}\r\n),\n\tnegate:true,\n\tbroadcast: 'auto')~> RemoveDeleted\nFilterEmptyRows sort(desc({timestamp-0}, false)) ~> SortByTimestamp\nSortByTimestamp aggregate(groupBy({$Company},\n\t\t{systemId-2000000000}),\n\teach(match(in(['systemId-2000000000', '$Company'], name) != true()), $$ = first($$))) ~> PickLastChanges\nDeltas, CurrentData union(byName: true)~> CombineWithDeltas\nRemoveDeleted filter(not(isNull({systemId-2000000000}))) ~> FilterEmptyRows\nPickLastChanges split(equals($dataFormat, 'parquet'),\n\tequals($dataFormat, 'CSV'),\n\tdisjoint: false) ~> DataFormatCondition@(ParquetStaging, CSVStaging)\nDataFormatCondition@ParquetStaging sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: ($containerName),\n\tfolderPath: (concat('staging/', $entityName)),\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\teach(match(true()))\n\t),\n\tmanifestType: 'manifest') ~> StagingParquet\nDataFormatCondition@CSVStaging sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: ($containerName),\n\tfolderPath: (concat('staging/', $entityName)),\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\teach(match(true()))\n\t),\n\tmanifestType: 'manifest') ~> StagingCSV"
        }
    }
}